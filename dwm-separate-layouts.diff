--- dwm.c.orig	2025-02-12 21:48:41.670156058 +0800
+++ dwm.c	2025-02-07 00:17:34.855494786 +0800
@@ -67,6 +67,8 @@
 enum { ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle,
        ClkClientWin, ClkRootWin, ClkLast }; /* clicks */
 
+const struct Layout *layout;
+
 typedef union {
 	int i;
 	unsigned int ui;
@@ -97,6 +99,7 @@
 	Client *snext;
 	Monitor *mon;
 	Window win;
+	const struct Layout *layout;
 };
 
 typedef struct {
@@ -106,7 +109,7 @@
 	const Arg arg;
 } Key;
 
-typedef struct {
+typedef struct Layout{
 	const char *symbol;
 	void (*arrange)(Monitor *);
 } Layout;
@@ -145,7 +148,6 @@
 static void applyrules(Client *c);
 static int applysizehints(Client *c, int *x, int *y, int *w, int *h, int interact);
 static void arrange(Monitor *m);
-static void arrangemon(Monitor *m);
 static void attach(Client *c);
 static void attachstack(Client *c);
 static void buttonpress(XEvent *e);
@@ -234,6 +236,9 @@
 static int xerrorstart(Display *dpy, XErrorEvent *ee);
 static void zoom(const Arg *arg);
 
+/*add function*/
+static void togglelayout(const Arg *arg);
+
 /* variables */
 static const char broken[] = "broken";
 static char stext[256];
@@ -309,6 +314,7 @@
 	if (ch.res_name)
 		XFree(ch.res_name);
 	c->tags = c->tags & TAGMASK ? c->tags & TAGMASK : c->mon->tagset[c->mon->seltags];
+	c->layout = c->mon->lt[0];
 }
 
 int
@@ -382,23 +388,17 @@
 void
 arrange(Monitor *m)
 {
-	if (m)
-		showhide(m->stack);
-	else for (m = mons; m; m = m->next)
-		showhide(m->stack);
 	if (m) {
-		arrangemon(m);
-		restack(m);
-	} else for (m = mons; m; m = m->next)
-		arrangemon(m);
-}
-
-void
-arrangemon(Monitor *m)
-{
-	strncpy(m->ltsymbol, m->lt[m->sellt]->symbol, sizeof m->ltsymbol);
-	if (m->lt[m->sellt]->arrange)
-		m->lt[m->sellt]->arrange(m);
+        	showhide(m->stack);
+        if (m->sel && m->sel->layout && m->sel->layout->arrange)
+            	m->sel->layout->arrange(m);
+        else if (m->lt[m->sellt]->arrange)
+            	m->lt[m->sellt]->arrange(m);
+        restack(m);
+    	} else {
+        	for (m = mons; m; m = m->next)
+            		arrange(m);
+    	}
 }
 
 void
@@ -697,55 +697,65 @@
 
 void
 drawbar(Monitor *m)
-{
+{	
 	int x, w, tw = 0;
-	int boxs = drw->fonts->h / 9;
-	int boxw = drw->fonts->h / 6 + 2;
-	unsigned int i, occ = 0, urg = 0;
-	Client *c;
-
-	if (!m->showbar)
-		return;
-
-	/* draw status first so it can be overdrawn by tags later */
-	if (m == selmon) { /* status is only drawn on selected monitor */
-		drw_setscheme(drw, scheme[SchemeNorm]);
-		tw = TEXTW(stext) - lrpad + 2; /* 2px right padding */
-		drw_text(drw, m->ww - tw, 0, tw, bh, 0, stext, 0);
-	}
-
-	for (c = m->clients; c; c = c->next) {
-		occ |= c->tags;
-		if (c->isurgent)
-			urg |= c->tags;
-	}
-	x = 0;
-	for (i = 0; i < LENGTH(tags); i++) {
-		w = TEXTW(tags[i]);
-		drw_setscheme(drw, scheme[m->tagset[m->seltags] & 1 << i ? SchemeSel : SchemeNorm]);
-		drw_text(drw, x, 0, w, bh, lrpad / 2, tags[i], urg & 1 << i);
-		if (occ & 1 << i)
-			drw_rect(drw, x + boxs, boxs, boxw, boxw,
-				m == selmon && selmon->sel && selmon->sel->tags & 1 << i,
-				urg & 1 << i);
-		x += w;
-	}
-	w = TEXTW(m->ltsymbol);
-	drw_setscheme(drw, scheme[SchemeNorm]);
-	x = drw_text(drw, x, 0, w, bh, lrpad / 2, m->ltsymbol, 0);
-
-	if ((w = m->ww - tw - x) > bh) {
-		if (m->sel) {
-			drw_setscheme(drw, scheme[m == selmon ? SchemeSel : SchemeNorm]);
-			drw_text(drw, x, 0, w, bh, lrpad / 2, m->sel->name, 0);
-			if (m->sel->isfloating)
-				drw_rect(drw, x + boxs, boxs, boxw, boxw, m->sel->isfixed, 0);
-		} else {
-			drw_setscheme(drw, scheme[SchemeNorm]);
-			drw_rect(drw, x, 0, w, bh, 1, 1);
-		}
-	}
-	drw_map(drw, m->barwin, 0, 0, m->ww, bh);
+        int boxs = drw->fonts->h / 9;
+        int boxw = drw->fonts->h / 6 + 2;
+        unsigned int i, occ = 0, urg = 0;
+        Client *c;
+        const char *layoutsymbol;  // 新增变量，用于存储正确的布局符号
+
+        if (!m->showbar)
+                return;
+
+        /* 获取当前窗口的布局符号 */
+        if (m->sel && m->sel->layout) {
+                layoutsymbol = m->sel->layout->symbol;
+        } else {
+                layoutsymbol = m->lt[m->sellt]->symbol; // 没有窗口时，回退到全局布局
+        }
+
+        /* draw status first so it can be overdrawn by tags later */
+        if (m == selmon) { /* status is only drawn on selected monitor */
+                drw_setscheme(drw, scheme[SchemeNorm]);
+                /*tw = TEXTW(stext) - lrpad + 2; // 2px right padding *//*dwm状态栏绘制*/
+                //drw_text(drw, m->ww - tw, 0, tw, bh, 0, stext, 0);
+        }
+
+        for (c = m->clients; c; c = c->next) {
+                occ |= c->tags;
+                if (c->isurgent)
+                        urg |= c->tags;
+        }
+        x = 0;
+        for (i = 0; i < LENGTH(tags); i++) {
+                w = TEXTW(tags[i]);
+                drw_setscheme(drw, scheme[m->tagset[m->seltags] & 1 << i ? SchemeSel : SchemeNorm]);
+                drw_text(drw, x, 0, w, bh, lrpad / 2, tags[i], urg & 1 << i);
+                if (occ & 1 << i)
+                        drw_rect(drw, x + boxs, boxs, boxw, boxw,
+                                m == selmon && selmon->sel && selmon->sel->tags & 1 << i,
+                                urg & 1 << i);
+                x += w;
+        }
+
+        /* 这里修改为使用 layoutsymbol */
+        w = TEXTW(layoutsymbol);
+        drw_setscheme(drw, scheme[SchemeNorm]);
+        x = drw_text(drw, x, 0, w, bh, lrpad / 2, layoutsymbol, 0);
+
+        if ((w = m->ww - tw - x) > bh) {
+                if (m->sel) {
+                        drw_setscheme(drw, scheme[m == selmon ? SchemeSel : SchemeNorm]);
+                        drw_text(drw, x, 0, w, bh, lrpad / 2, m->sel->name, 0);
+                        if (m->sel->isfloating)
+                                drw_rect(drw, x + boxs, boxs, boxw, boxw, m->sel->isfixed, 0);
+                } else {
+                        drw_setscheme(drw, scheme[SchemeNorm]);
+                        drw_rect(drw, x, 0, w, bh, 1, 1);
+                }
+        }
+        drw_map(drw, m->barwin, 0, 0, m->ww, bh);
 }
 
 void
@@ -980,7 +990,11 @@
 void
 incnmaster(const Arg *arg)
 {
-	selmon->nmaster = MAX(selmon->nmaster + arg->i, 0);
+	int new_nmaster = selmon->nmaster + arg->i;
+	if(new_nmaster <= 0){
+		new_nmaster = selmon->nmaster;
+	}
+	selmon->nmaster = new_nmaster;
 	arrange(selmon);
 }
 
@@ -2140,6 +2154,13 @@
 	pop(c);
 }
 
+void togglelayout(const Arg *arg) {
+	if (!selmon->sel)
+        	return;
+    	selmon->sel->layout = (const Layout *)arg->v;
+    	arrange(selmon);
+}
+
 int
 main(int argc, char *argv[])
 {
